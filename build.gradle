plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.5'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'com.safety'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}

	asciidoctorExt
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta' // QueryDSL 라이브러리
	implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.json:json:20220320'
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'io.netty:netty-resolver-dns-native-macos:4.1.68.Final:osx-aarch_64' // MAC-OS 에러 방지
    implementation 'org.jsoup:jsoup:1.15.3' // 크롤링을 위한 라이브러리
    implementation 'org.springframework.boot:spring-boot-starter-data-redis' // Redis
    implementation 'com.google.firebase:firebase-admin:9.2.0' // FCM을 위한 라이브러리
    
	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'

	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'


	runtimeOnly 'com.mysql:mysql-connector-j'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api:3.1.0' // QueryDSL 라이브러리
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta" // QueryDSL 라이브러리

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

// Querydsl 설정부
def generated = 'src/main/generated'

// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile) {
	options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// java source set 에 querydsl QClass 위치 추가
sourceSets {
	main.java.srcDirs += [ generated ]
}

// gradle clean 시에 QClass 디렉토리 삭제
clean {
	delete file(generated)
}

ext {
    snippetsDir = file('build/generated-snippets')
}

tasks {
    def isTest = gradle.startParameter.excludedTaskNames.contains('test')

    if (!isTest) {
        asciidoctor {
            dependsOn test
            inputs.dir snippetsDir
            doFirst {
                delete file('src/main/resources/static/docs')
            }
        }
    }

    test {
        outputs.dir snippetsDir
    }


    bootJar {
        if (!isTest) {
            dependsOn asciidoctor
            from("${asciidoctor.outputDir}/html5") {
                into 'static/docs'
            }
        }
    }

    task copyDocument(type: Copy) {
        if (!isTest) {
            dependsOn asciidoctor
            from file("build/docs/asciidoc")
            into file("src/main/resources/static/docs")
        }
    }

    build {
        if (!isTest) {
            dependsOn copyDocument
        }
    }
}